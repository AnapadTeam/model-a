package tech.anapad.modela.usb.mapping;

/**
 * {@link Keycode} represents a key code from the USB HID Keyboard/Keypad usage page.
 *
 * @see "Page 88 of USB HID Usage Tables"
 */
public enum Keycode {

    ERROR_ROLLOVER(0x0001),
    ERROR_POST_FAIL(0x0002),
    ERROR_UNDEFINED(0x0003),
    A(0x0004),
    B(0x0005),
    C(0x0006),
    D(0x0007),
    E(0x0008),
    F(0x0009),
    G(0x000A),
    H(0x000B),
    I(0x000C),
    J(0x000D),
    K(0x000E),
    L(0x000F),
    M(0x0010),
    N(0x0011),
    O(0x0012),
    P(0x0013),
    Q(0x0014),
    R(0x0015),
    S(0x0016),
    T(0x0017),
    U(0x0018),
    V(0x0019),
    W(0x001A),
    X(0x001B),
    Y(0x001C),
    Z(0x001D),
    _1_OR_EXCLAMATION_MARK(0x001E),
    _2_OR_AT_SIGN(0x001F),
    _3_OR_NUMBER_SIGN(0x0020),
    _4_OR_DOLLAR_SIGN(0x0021),
    _5_OR_PERCENT_SIGN(0x0022),
    _6_OR_CARET(0x0023),
    _7_OR_AMPERSAND(0x0024),
    _8_OR_ASTERISK(0x0025),
    _9_OR_LEFT_PARENTHESIS(0x0026),
    _0_OR_RIGHT_PARENTHESIS(0x0027),
    ENTER(0x0028),
    ESCAPE(0x0029),
    BACKSPACE(0x002A),
    TAB(0x002B),
    SPACE(0x002C),
    MINUS_OR_UNDERSCORE(0x002D),
    EQUALS_OR_PLUS_SIGN(0x002E),
    LEFT_BRACKET_OR_LEFT_BRACE(0x002F),
    RIGHT_BRACKET_OR_RIGHT_BRACE(0x0030),
    BACKSLASH_OR_PIPE(0x0031),
    SEMICOLON_OR_COLON(0x0033),
    APOSTROPHE_OR_DOUBLE_APOSTROPHE(0x0034),
    GRAVE_OR_TILDE(0x0035),
    COMMA_OR_LEFT_ANGLE_BRACKET(0x0036),
    PERIOD_OR_RIGHT_ANGLE_BRACKET(0x0037),
    FORWARD_SLASH_OR_QUESTION_MARK(0x0038),
    CAPSLOCK(0x0039),
    F1(0x003A),
    F2(0x003B),
    F3(0x003C),
    F4(0x003D),
    F5(0x003E),
    F6(0x003F),
    F7(0x0040),
    F8(0x0041),
    F9(0x0042),
    F10(0x0043),
    F11(0x0044),
    F12(0x0045),
    PRINT_SCREEN(0x0046),
    SCROLL_LOCK(0x0047),
    PAUSE(0x0048),
    INSERT(0x0049),
    HOME(0x004A),
    PAGE_UP(0x004B),
    DELETE(0x004C),
    END(0x004D),
    PAGE_DOWN(0x004E),
    RIGHT_ARROW(0x004F),
    LEFT_ARROW(0x0050),
    DOWN_ARROW(0x0051),
    UP_ARROW(0x0052),
    NUM_LOCK_OR_CLEAR(0x0053),
    KEYPAD_FORWARD_SLASH(0x0054),
    KEYPAD_ASTERISK(0x0055),
    KEYPAD_MINUS_SIGN(0x0056),
    KEYPAD_PLUS_SIGN(0x0057),
    KEYPAD_ENTER(0x0058),
    KEYPAD_1(0x0059),
    KEYPAD_2(0x005A),
    KEYPAD_3(0x005B),
    KEYPAD_4(0x005C),
    KEYPAD_5(0x005D),
    KEYPAD_6(0x005E),
    KEYPAD_7(0x005F),
    KEYPAD_8(0x0060),
    KEYPAD_9(0x0061),
    KEYPAD_0(0x0062),
    KEYPAD_DOT(0x0063),
    APPLICATION(0x0065),
    POWER(0x0066),
    KEYPAD_EQUALS(0x0067),
    F13(0x0068),
    F14(0x0069),
    F15(0x006A),
    F16(0x006B),
    F17(0x006C),
    F18(0x006D),
    F19(0x006E),
    F20(0x006F),
    F21(0x0070),
    F22(0x0071),
    F23(0x0072),
    F24(0x0073),
    EXECUTE(0x0074),
    HELP(0x0075),
    MENU(0x0076),
    SELECT(0x0077),
    STOP(0x0078),
    AGAIN(0x0079),
    UNDO(0x007A),
    CUT(0x007B),
    COPY(0x007C),
    PASTE(0x007D),
    FIND(0x007E),
    MUTE(0x007F),
    VOLUME_UP(0x0080),
    VOLUME_DOWN(0x0081),
    LOCKING_CAPS_LOCK(0x0082),
    LOCKING_NUM_LOCK(0x0083),
    LOCKING_SCROLL_LOCK(0x0084),
    KEYPAD_COMMA(0x0085),
    KEYPAD_EQUALS_OTHER(0x0086);

    private final byte code;

    /**
     * Instantiates a new {@link Keycode}.
     *
     * @param code the USB HID keyboard/keypad usage ID code
     */
    Keycode(int code) {
        this.code = (byte) (code & 0xFF);
    }

    public byte getCode() {
        return code;
    }
}
